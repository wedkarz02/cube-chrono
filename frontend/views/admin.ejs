<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Panel Administratora - Cube Chrono</title>
    <link rel="stylesheet" href="style.css">
    <script>
       
        const isAdmin = true;
    </script>
</head>
<body>
    <header>
        <h1>Panel Administratora</h1>
        <div class="auth-links">
            <a href="/">Strona Główna</a>
        </div>
    </header>

    <main>
        <section id="admin-panel" style="display: none;">
            <h2>Zarządzanie Użytkownikami</h2>
            <% if (accounts && accounts.length > 0) { %>
            <table class="admin-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Nazwa Użytkownika</th>
                        <th>Rola</th>
                        <th>Akcje</th>
                    </tr>
                </thead>
                <tbody>
                    <% accounts.forEach(account => { %>
                    <tr>
                        <td><%= account.id %></td>
                        <td><%= account.username %></td>
                        <td><%= account.roles.join(", ") %></td>
                        <td><button class="delete-btn" data-id="<%= account.id %>">Usuń</button></td>
                    </tr>
                    <% }) %>
                </tbody>
            </table>
            <% } else { %>
                <p>Nie udało się wczytać użytkowników.</p>
            <% } %>
        </section>

        <section id="access-denied" style="display: none;">
            <h2>Brak Dostępu</h2>
            <p>Nie masz uprawnień do przeglądania tej strony. Zaloguj się jako administrator.</p>
            <a href="/login" class="btn-login">Zaloguj się</a>
        </section>
    </main>

    <footer>
        <p>&copy; 2024 Cube Chrono. Wszystkie prawa zastrzeżone.</p>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            if (isAdmin) {
                document.getElementById('admin-panel').style.display = 'block';
            } else {
                document.getElementById('access-denied').style.display = 'block';
            }
        });
    </script>
<script>
    const usersButton = document.getElementById('get-all-users');
    const deleteUserButton = document.getElementById('delete-user'); 

    usersButton.addEventListener('click', async () => {
        await getAllUsers();
    });

    deleteUserButton.addEventListener('click', async () => {
        await deleteUser("eccc3d06-d863-4d38-a4ea-6104489bfc8c");
    });

    async function getAllUsers() {
        try {
            const response = await fetch(`http://localhost:3000/all-users`, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                }
            });

            const jsonResult = await response.json();
            console.log(jsonResult);

            if (response.status == 200) {
                console.log("GIT");
            } else {
                console.log("NIE GIT");
            }
        } catch (error) {
            console.error('Błąd połączenia:', error);
            alert('Wystąpił błąd połączenia z serwerem.');
        }
    }

    async function getSession(session_id) {
        try {
            const data = {
                session_id: session_id
            };

            const response = await fetch(`http://localhost:3000/session`, {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const jsonResult = await response.json();
            console.log(jsonResult);

            if (response.status == 200) {
                console.log("GIT");
            } else {
                console.log("NIE GIT");
            }
        } catch (error) {
            console.error('Błąd połączenia:', error);
            alert('Wystąpił błąd połączenia z serwerem.');
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
    if (isAdmin) {
        document.getElementById('admin-panel').style.display = 'block';

        const deleteButtons = document.querySelectorAll('.delete-btn');
        deleteButtons.forEach(button => {
            button.addEventListener('click', async (event) => {
                const userId = event.target.getAttribute('data-id');
                await deleteUser(userId);
                location.reload();
            });
        });
    } else {
        document.getElementById('access-denied').style.display = 'block';
    }
});

async function deleteUser(user_id) {
    try {
        const data = {
            user_id: user_id
        };

        const response = await fetch(`http://localhost:3000/delete-user`, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const jsonResult = await response.json();
        console.log(jsonResult);

        if (response.status == 200) {
            alert('Użytkownik został usunięty.');
        } else {
            alert('Nie udało się usunąć użytkownika.');
        }
    } catch (error) {
        console.error('Błąd połączenia:', error);
        alert('Wystąpił błąd połączenia z serwerem.');
    }
}
</script>
</body>
</html>